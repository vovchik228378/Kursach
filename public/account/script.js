// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let map;
let currentUser;

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserMarkers(userId) {
    try {
        const { data: markers, error } = await supabase
            .from('markers')
            .select('*')
            .eq('user_id', userId)
            .order('created_at', { ascending: false });

        if (error) throw error;

        // –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—É –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–∫
        map.geoObjects.removeAll();

        if (markers && markers.length > 0) {
            markers.forEach(addMarkerToMap);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ–¥ –º–µ—Ç–∫–∏
            const bounds = map.geoObjects.getBounds();
            if (bounds) {
                map.setBounds(bounds, { checkZoomRange: true });
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–æ–∫:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—É
function addMarkerToMap(marker) {
    const placemark = new ymaps.Placemark(
        [marker.lat, marker.lng], {
            balloonContentHeader: `<strong>${marker.name}</strong> ${marker.emoji || ''}`,
            balloonContentBody: marker.description || '',
            hintContent: marker.name
        }, {
            preset: marker.emoji ? 'islands#' + marker.emoji + 'CircleIcon' : 'islands#blueCircleIcon',
            balloonCloseButton: true
        }
    );

    map.geoObjects.add(placemark);
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –º–µ—Ç–∫–∏
async function addNewMarker(coords, name, description, emoji = 'üìç') {
    try {
        const { error } = await supabase
            .from('markers')
            .insert([{
                user_id: currentUser.id,
                lat: coords[0],
                lng: coords[1],
                name,
                description,
                emoji
            }]);

        if (error) throw error;

        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–∫–∏:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–∫–∏
function showMarkerForm(coords) {
    // –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–∞—à—É —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–∫–∏
    // –ü—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—ã–∑—ã–≤–∞–π—Ç–µ addNewMarker()
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', async() => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: { user }, error } = await supabase.auth.getUser();
        if (error || !user) {
            window.location.href = '/login/login.html';
            return;
        }

        currentUser = user;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
        ymaps.ready(() => {
            map = new ymaps.Map("map", {
                center: [55.76, 37.64],
                zoom: 10,
                controls: ['zoomControl']
            });

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            loadUserMarkers(user.id);

            // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫
            const urlParams = new URLSearchParams(window.location.search);
            const profileUserId = urlParams.get('userId');

            if (!profileUserId || profileUserId === user.id) {
                map.events.add('click', (e) => {
                    const coords = e.get('coords');
                    showMarkerForm(coords);
                });
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        window.location.href = '/login/login.html';
    }
});