document.addEventListener('DOMContentLoaded', function() {
    const urlParams = new URLSearchParams(window.location.search);
    const profileUsername = urlParams.get('username');
    const currentUsername = localStorage.getItem('username');
    const token = localStorage.getItem('token');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (profileUsername && profileUsername !== currentUsername) {
        document.getElementById('addMarker').style.display = 'none';
        document.getElementById('markerList').style.display = 'none';
        document.getElementById('removeMarker').style.display = 'none';
        document.querySelector('h2').textContent = `–ö–∞—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${profileUsername}`;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
    ymaps.ready(init);

    let myMap;
    let markers = [];

    function init() {
        myMap = new ymaps.Map("map", {
            center: [55.76, 37.64],
            zoom: 10,
            controls: ['zoomControl']
        });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –ø–æ –∫–ª–∏–∫—É
        if (!profileUsername || profileUsername === currentUsername) {
            myMap.events.add('click', function(e) {
                showMarkerForm(e.get('coords'));
            });
        }

        loadMarkers();
    }

    // –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–∫–∏
    function showMarkerForm(coords) {
        const form = document.createElement('div');
        form.className = 'marker-form-overlay';
        form.innerHTML = `
            <div class="marker-form">
                <h3>–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∫—É</h3>
                <input type="text" id="markerName" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–∫–∏*" required>
                <textarea id="markerDesc" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"></textarea>
                <select id="markerEmoji">
                    <option value="üëç">üëç –ù—Ä–∞–≤–∏—Ç—Å—è</option>
                    <option value="üëé">üëé –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è</option>
                    <option value="‚ù§Ô∏è">‚ù§Ô∏è –õ—é–±–∏–º–æ–µ –º–µ—Å—Ç–æ</option>
                    <option value="üòä">üòä –ü—Ä–∏—è—Ç–Ω–æ–µ –º–µ—Å—Ç–æ</option>
                    <option value="üçΩÔ∏è">üçΩÔ∏è –ú–µ—Å—Ç–æ –¥–ª—è –µ–¥—ã</option>
                    <option value="üè†">üè† –î–æ–º</option>
                    <option value="üè¢">üè¢ –†–∞–±–æ—Ç–∞</option>
                </select>
                <div class="form-buttons">
                    <button id="submitMarker" class="button">–î–æ–±–∞–≤–∏—Ç—å</button>
                    <button id="cancelMarker" class="button button-cancel">–û—Ç–º–µ–Ω–∞</button>
                </div>
            </div>
        `;

        document.body.appendChild(form);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ñ–æ—Ä–º—ã
        document.getElementById('submitMarker').addEventListener('click', async function() {
            const name = document.getElementById('markerName').value.trim();
            const description = document.getElementById('markerDesc').value.trim();
            const emoji = document.getElementById('markerEmoji').value;

            if (!name) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–∫–∏');
                return;
            }

            try {
                await addMarkerToServer(coords, name, description, emoji);
                document.body.removeChild(form);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞:', error);
            }
        });

        document.getElementById('cancelMarker').addEventListener('click', function() {
            document.body.removeChild(form);
        });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–æ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞
    async function loadMarkers() {
        try {
            const username = profileUsername || currentUsername;
            if (!username || !token) return;

            const response = await fetch(`/api/markers?username=${encodeURIComponent(username)}`, { //–¢—É—Ç
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
            }

            markers = await response.json();
            refreshMapMarkers();
            updateMarkerList();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–æ–∫:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.');
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    async function addMarkerToServer(coords, name, description, emoji) {
        try {
            const response = await fetch('/api/markers/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({
                    lat: coords[0],
                    lng: coords[1],
                    name: name,
                    description: description,
                    emoji: emoji
                })
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ç–∫–∏');
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–µ—Ç–∫—É –≤ –º–∞—Å—Å–∏–≤
            markers.unshift(data.marker);
            refreshMapMarkers();
            updateMarkerList();

            return data.marker;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–∫–∏:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∫—É: ' + error.message);
            throw error;
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏
    async function removeMarkerFromServer(markerId) {
        try {
            const response = await fetch(`/api/markers/delete/${markerId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ç–∫–∏');
            }

            // –£–¥–∞–ª—è–µ–º –º–µ—Ç–∫—É –∏–∑ –º–∞—Å—Å–∏–≤–∞
            markers = markers.filter(marker => marker.id != markerId);
            refreshMapMarkers();
            updateMarkerList();

            alert('–ú–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ç–∫–∏:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ—Ç–∫—É: ' + error.message);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–µ—Ç–æ–∫ –≤ select
    function updateMarkerList() {
        const select = document.getElementById('markerList');
        if (!select) return;

        select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</option>';

        markers.forEach(marker => {
            const option = document.createElement('option');
            option.value = marker.id;
            option.textContent = `${marker.name} ${marker.emoji || ''}`;
            select.appendChild(option);
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ
    function refreshMapMarkers() {
        if (!myMap) return;

        myMap.geoObjects.removeAll();

        markers.forEach(marker => {
            const placemark = new ymaps.Placemark(
                [marker.lat, marker.lng], {
                    balloonContentHeader: `<strong>${marker.name}</strong> ${marker.emoji || ''}`,
                    balloonContentBody: marker.description || '',
                    balloonContentFooter: `–î–æ–±–∞–≤–ª–µ–Ω–æ: ${marker.username || currentUsername}`,
                    hintContent: marker.name
                }, {
                    preset: marker.emoji ? 'islands#' + marker.emoji + 'CircleIcon' : 'islands#blueCircleIcon',
                    balloonCloseButton: true,
                    hideIconOnBalloonOpen: false
                }
            );

            myMap.geoObjects.add(placemark);
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    const removeBtn = document.getElementById('removeMarker');
    if (removeBtn) {
        removeBtn.addEventListener('click', function() {
            const select = document.getElementById('markerList');
            const markerId = select.value;

            if (markerId && confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –º–µ—Ç–∫—É?')) {
                removeMarkerFromServer(markerId);
            }
        });
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(() => {
        if (document.visibilityState === 'visible') {
            loadMarkers();
        }
    }, 30000);
});